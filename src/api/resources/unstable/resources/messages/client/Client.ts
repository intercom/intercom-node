/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Intercom from "../../../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index";

export declare namespace Messages {
    export interface Options {
        environment?: core.Supplier<environments.IntercomEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Intercom-Version header */
        version?:
            | "1.0"
            | "1.1"
            | "1.2"
            | "1.3"
            | "1.4"
            | "2.0"
            | "2.1"
            | "2.2"
            | "2.3"
            | "2.4"
            | "2.5"
            | "2.6"
            | "2.7"
            | "2.8"
            | "2.9"
            | "2.10"
            | "2.11"
            | "Unstable";
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
        /** Override the Intercom-Version header */
        version?:
            | "1.0"
            | "1.1"
            | "1.2"
            | "1.3"
            | "1.4"
            | "2.0"
            | "2.1"
            | "2.2"
            | "2.3"
            | "2.4"
            | "2.5"
            | "2.6"
            | "2.7"
            | "2.8"
            | "2.9"
            | "2.10"
            | "2.11"
            | "Unstable";
    }
}

/**
 * Everything about your messages
 */
export class Messages {
    constructor(protected readonly _options: Messages.Options = {}) {}

    /**
     * You can create a message that has been initiated by an admin. The conversation can be either an in-app message, an email or sms.
     *
     * > ðŸš§ Sending for visitors
     * >
     * > There can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.
     *
     * This will return the Message model that has been created.
     *
     * > ðŸš§ Retrieving Associated Conversations
     * >
     * > As this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message.
     *
     * @param {Intercom.CreateMessageRequestTwo} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.unstable.BadRequestError}
     * @throws {@link Intercom.unstable.UnauthorizedError}
     * @throws {@link Intercom.unstable.ForbiddenError}
     * @throws {@link Intercom.unstable.UnprocessableEntityError}
     *
     * @example
     *     await client.unstable.messages.createMessage({
     *         "from": {
     *             "type": "user",
     *             "id": "6762f2341bb69f9f2193bc17"
     *         },
     *         "body": "heyy",
     *         "referer": "https://twitter.com/bob"
     *     })
     *
     * @example
     *     await client.unstable.messages.createMessage({
     *         "from": {
     *             "type": "lead",
     *             "id": "6762f2371bb69f9f2193bc18"
     *         },
     *         "body": "heyy",
     *         "referer": "https://twitter.com/bob"
     *     })
     *
     * @example
     *     await client.unstable.messages.createMessage({
     *         "from": {
     *             "type": "admin",
     *             "id": "991267816"
     *         },
     *         "to": [
     *             {
     *                 "type": "user",
     *                 "id": "6762f2391bb69f9f2193bc19"
     *             },
     *             {
     *                 "type": "lead",
     *                 "id": "6762f23c1bb69f9f2193bc1b"
     *             },
     *             {
     *                 "type": "user",
     *                 "id": "6762f23d1bb69f9f2193bc1c"
     *             }
     *         ],
     *         "cc": [
     *             {
     *                 "type": "user",
     *                 "id": "6762f23e1bb69f9f2193bc1d"
     *             },
     *             {
     *                 "type": "user",
     *                 "id": "6762f23f1bb69f9f2193bc1e"
     *             }
     *         ],
     *         "bcc": [
     *             {
     *                 "type": "user",
     *                 "id": "6762f23e1bb69f9f2193bc2f"
     *             }
     *         ],
     *         "message_type": "conversation",
     *         "body": "heyy"
     *     })
     *
     * @example
     *     await client.unstable.messages.createMessage({
     *         "from": {
     *             "type": "admin",
     *             "id": "991267817"
     *         },
     *         "to": {
     *             "type": "user",
     *             "id": "6762f23a1bb69f9f2193bc1a"
     *         },
     *         "message_type": "sms",
     *         "body": "heyy"
     *     })
     *
     * @example
     *     await client.unstable.messages.createMessage({
     *         "from": {
     *             "type": "admin",
     *             "id": "991267818"
     *         },
     *         "to": {
     *             "type": "user",
     *             "id": "6762f23b1bb69f9f2193bc1a"
     *         },
     *         "message_type": "inapp",
     *         "subject": "heyy"
     *     })
     *
     * @example
     *     await client.unstable.messages.createMessage({
     *         "from": {
     *             "type": "admin",
     *             "id": "991267819"
     *         },
     *         "to": {
     *             "type": "user",
     *             "user_id": "70"
     *         },
     *         "message_type": "email",
     *         "body": "hey there"
     *     })
     *
     * @example
     *     await client.unstable.messages.createMessage({
     *         "from": {
     *             "type": "admin",
     *             "id": "991267820"
     *         },
     *         "to": {
     *             "type": "user",
     *             "id": "6762f23d1bb69f9f2193bc1c"
     *         },
     *         "message_type": "email",
     *         "subject": "heyy"
     *     })
     *
     * @example
     *     await client.unstable.messages.createMessage({
     *         "from": {
     *             "type": "admin",
     *             "id": "991267821"
     *         },
     *         "to": {
     *             "type": "user",
     *             "id": "6762f23b1bb69f9f2193bc1d"
     *         },
     *         "message_type": "sms",
     *         "body": "heyy https://picsum.photos/200/300"
     *     })
     */
    public createMessage(
        request?: Intercom.CreateMessageRequestTwo,
        requestOptions?: Messages.RequestOptions,
    ): core.HttpResponsePromise<Intercom.unstable.Message> {
        return core.HttpResponsePromise.fromPromise(this.__createMessage(request, requestOptions));
    }

    private async __createMessage(
        request?: Intercom.CreateMessageRequestTwo,
        requestOptions?: Messages.RequestOptions,
    ): Promise<core.WithRawResponse<Intercom.unstable.Message>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IntercomEnvironment.UsProduction,
                "messages",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "intercom-client",
                "X-Fern-SDK-Version": "v6.4.0",
                "User-Agent": "intercom-client/v6.4.0",
                "Intercom-Version": requestOptions?.version ?? this._options?.version ?? "2.11",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 20000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Intercom.unstable.Message, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Intercom.unstable.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Intercom.unstable.UnauthorizedError(
                        _response.error.body as Intercom.unstable.Error_,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Intercom.unstable.ForbiddenError(
                        _response.error.body as Intercom.unstable.Error_,
                        _response.rawResponse,
                    );
                case 422:
                    throw new Intercom.unstable.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntercomError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IntercomTimeoutError("Timeout exceeded when calling POST /messages.");
            case "unknown":
                throw new errors.IntercomError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves statuses of messages sent from the Outbound module. Currently, this API only supports WhatsApp messages.
     *
     *
     * This endpoint returns paginated status events for WhatsApp messages sent via the Outbound module, providing
     * information about delivery state and related message details.
     *
     * @param {Intercom.unstable.GetWhatsAppMessageStatusRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Intercom.unstable.BadRequestError}
     * @throws {@link Intercom.unstable.UnauthorizedError}
     * @throws {@link Intercom.unstable.ForbiddenError}
     * @throws {@link Intercom.unstable.InternalServerError}
     *
     * @example
     *     await client.unstable.messages.getWhatsAppMessageStatus({
     *         ruleset_id: "ruleset_id"
     *     })
     */
    public getWhatsAppMessageStatus(
        request: Intercom.unstable.GetWhatsAppMessageStatusRequest,
        requestOptions?: Messages.RequestOptions,
    ): core.HttpResponsePromise<Intercom.unstable.WhatsappMessageStatusList> {
        return core.HttpResponsePromise.fromPromise(this.__getWhatsAppMessageStatus(request, requestOptions));
    }

    private async __getWhatsAppMessageStatus(
        request: Intercom.unstable.GetWhatsAppMessageStatusRequest,
        requestOptions?: Messages.RequestOptions,
    ): Promise<core.WithRawResponse<Intercom.unstable.WhatsappMessageStatusList>> {
        const { ruleset_id: rulesetId, per_page: perPage, starting_after: startingAfter } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["ruleset_id"] = rulesetId;
        if (perPage != null) {
            _queryParams["per_page"] = perPage.toString();
        }

        if (startingAfter != null) {
            _queryParams["starting_after"] = startingAfter;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.IntercomEnvironment.UsProduction,
                "messages/status",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "intercom-client",
                "X-Fern-SDK-Version": "v6.4.0",
                "User-Agent": "intercom-client/v6.4.0",
                "Intercom-Version": requestOptions?.version ?? this._options?.version ?? "2.11",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 20000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Intercom.unstable.WhatsappMessageStatusList,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Intercom.unstable.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Intercom.unstable.UnauthorizedError(
                        _response.error.body as Intercom.unstable.Error_,
                        _response.rawResponse,
                    );
                case 403:
                    throw new Intercom.unstable.ForbiddenError(
                        _response.error.body as Intercom.unstable.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Intercom.unstable.InternalServerError(
                        _response.error.body as Intercom.unstable.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.IntercomError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.IntercomError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.IntercomTimeoutError("Timeout exceeded when calling GET /messages/status.");
            case "unknown":
                throw new errors.IntercomError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        const bearer = (await core.Supplier.get(this._options.token)) ?? process?.env["INTERCOM_API_KEY"];
        if (bearer == null) {
            throw new errors.IntercomError({
                message:
                    "Please specify a bearer by either passing it in to the constructor or initializing a INTERCOM_API_KEY environment variable",
            });
        }

        return `Bearer ${bearer}`;
    }
}
